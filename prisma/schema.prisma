generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(uuid())
  name            String           @default("")
  email           String           @unique
  password        String?          @default("")
  phone           String?          @default("")
  address         String?          @default("")
  avatar          String           @default("")
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  firstName       String           @default("")
  lastName        String           @default("")
  status          STATUS           @default(ACTIVE)
  type            TYPE_LOGIN       @default(GOOGLE)
  role            ROLE             @default(CUSTOMER)
  addresses       Address[]
  cart            Cart?
  orders          Order[]
  paymentAccounts PaymentAccount[]
  shop            Shop?
  comments        Comment[]
}

model PaymentAccount {
  id            String   @id @default(uuid())
  userId        String
  accountNumber String
  bank          String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])
}

model Address {
  id            String   @id @default(uuid())
  userId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  city          String
  streetAddress String
  user          User     @relation(fields: [userId], references: [id])
}

model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  status    STATUS     @default(ACTIVE)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id])
  cartItems CartItem[]
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  image     String
  price     Float
  quantity  Int
  createdAt DateTime @default(now())
  title     String?
  variantId Float?
  shopId    String?
  shopName  String?
  cart      Cart     @relation(fields: [cartId], references: [id])
}

model Shop {
  id                  String   @id @default(uuid())
  shopifyTokenApi     String
  shopifyKeyApi       String
  shopifySecretKeyApi String
  urlStore            String
  shopName            String   @unique
  status              STATUS   @default(ACTIVE)
  hostVersion         String   @default("2024-04")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  userId              String   @unique
  baseUrl             String
  shopAvatar          String?
  shopBanners         String[] @default(["", "", ""])
  reels               Reel[]
  user                User     @relation(fields: [userId], references: [id])
}

model Reel {
  id        String   @id @default(uuid())
  thumbnail String
  video     String
  title     String
  shopId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  shop      Shop     @relation(fields: [shopId], references: [id])
}

model ShopRaw {
  id                  String   @id @default(uuid())
  shopifyTokenApi     String
  shopifyKeyApi       String
  shopifySecretKeyApi String
  urlStore            String
  shopName            String
  hostVersion         String   @default("2024-04")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  userId              String
  shopAvatar          String?
  shopAvatarId        String?
}

model Order {
  id            String       @id @default(uuid())
  address       String
  amount        Float
  cartItems     Json
  firstName     String
  lastName      String
  avatarUser    String?
  email         String?
  paymentMethod String
  phoneNumber   String
  status        STATUS_ORDER
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  userId        String
  user          User         @relation(fields: [userId], references: [id])
}

model Livestream {
  id        String   @id @default(uuid())
  roomId    String
  role      String   @default("Host")
  userId    String
  shopName  String
  isHost    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id            String       @id @default(uuid())
  userId        String
  content       String
  numOfStar     Int?
  optionProduct String?
  imageUrls     String[]     @default([])
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  typeComment   TYPE_COMMENT @default(PRODUCT)
  etag          String       // id of reel, feed, product
  user          User         @relation(fields: [userId], references: [id])
}

enum TYPE_COMMENT {
  REEL
  FEED
  PRODUCT
}

enum STATUS {
  ACTIVE
  INACTIVE
}

enum TYPE_LOGIN {
  GOOGLE
  GITHUB
  LOCAL
}

enum STATUS_ORDER {
  FULFILLED
  UNFULFILLED
}

enum ROLE {
  CUSTOMER
  ADMIN_SHOP
  ADMIN_MARKET_PLACE
}

enum PAYMENT_METHOD {
  DELIVERY
  ZALOPAY
  CREDIT
}
